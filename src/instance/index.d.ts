import { Base } from "../base";
import { customer } from "../customer/types";
import { instance, NewInstance, UpdateInstance, Product, NewProduct, CreatedProduct, DeletedProduct, UpdateProduct, UpdatedProduct, Transaction, NewTransaction, CreatedTransaction, UpdateTransaction, UpdatedTransaction, Invoice, Invoices, NewInvoice, CreatedInvoice, DeletedInvoice, UpdateInvoice, UpdatedInvoice, NewCustomer, CreatedCustomer, UpdateCustomer, UpdatedCustomer, sub_user, sub_users, NewUser, CreatedUser, DeletedUser, UpdateUser, addresses, NewAddress, DeletedAddress, UpdateAddress, SearchParams, RevenueParams, TotalParams, SeriesParams, InstancePageParams } from "./types";
export declare class Instance extends Base {
    getInstance(instance_id: number): Promise<instance>;
    createInstance(params: NewInstance): Promise<instance>;
    updateInstance(params: UpdateInstance): Promise<instance>;
    getInstancePage(page_number: number, params?: InstancePageParams): Promise<instance[]>;
    getInstanceProducts(instance_id: number, params?: SearchParams): Promise<Product[]>;
    createInstanceProduct(instance_id: number, params: NewProduct): Promise<CreatedProduct>;
    deleteInstanceProduct(instance_id: number, product_id: number): Promise<DeletedProduct>;
    updateInstanceProduct(instance_id: number, params: UpdateProduct): Promise<UpdatedProduct>;
    getInstanceTransactions(instance_id: number): Promise<Transaction[]>;
    findInstanceTransactions(instance_id: number, params?: SearchParams): Promise<Transaction[]>;
    getProductTransactions(instance_id: number, product_id: number): Promise<Transaction[]>;
    deleteInstanceTransaction(instance_id: number, transaction_id: number): Promise<instance>;
    createInstanceTransaction(instance_id: number, params: NewTransaction): Promise<CreatedTransaction>;
    updateInstanceTransaction(instance_id: number, params: UpdateTransaction): Promise<UpdatedTransaction>;
    getInstanceInvoices(instance_id: number, params?: SearchParams): Promise<Invoices>;
    getInstanceInvoice(instance_id: number, invoice_id: number): Promise<Invoice>;
    deleteInstanceInvoice(instance_id: number, invoice_id: number): Promise<DeletedInvoice>;
    createInstanceInvoice(instance_id: number, params: NewInvoice): Promise<CreatedInvoice>;
    updateInstanceInvoice(instance_id: number, params: UpdateInvoice): Promise<UpdatedInvoice>;
    getInstanceSeries(instance_id: number, params?: SeriesParams): Promise<instance[]>;
    getInstanceTotal(instance_id: number, params?: TotalParams): Promise<instance[]>;
    getInstanceRevenue(instance_id: number, params?: RevenueParams): Promise<instance[]>;
    getInstanceCustomers(instance_id: number, params?: SearchParams): Promise<customer[]>;
    getInstanceCustomer(instance_id: number, customer_id: number): Promise<customer>;
    deleteInstanceCustomer(instance_id: number, customer_id: number): Promise<instance>;
    createInstanceCustomer(instance_id: number, params: NewCustomer): Promise<CreatedCustomer>;
    updateInstanceCustomer(instance_id: number, params: UpdateCustomer): Promise<UpdatedCustomer>;
    getInstanceUsers(instance_id: number, params?: SearchParams): Promise<sub_users>;
    getInstanceUser(instance_id: number, user_id: number): Promise<sub_user>;
    deleteInstanceUser(instance_id: number, user_id: number): Promise<DeletedUser>;
    createInstanceUser(instance_id: number, params: NewUser): Promise<CreatedUser>;
    updateInstanceUser(instance_id: number, params: UpdateUser): Promise<instance>;
    getInstanceAddresses(instance_id: number, params?: SearchParams): Promise<addresses>;
    deleteInstanceAddress(instance_id: number, address_id: number): Promise<DeletedAddress>;
    createInstanceAddress(instance_id: number, params: NewAddress): Promise<instance>;
    updateInstanceAddress(instance_id: number, params: UpdateAddress): Promise<instance>;
}
