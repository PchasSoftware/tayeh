import { Base } from "../base";
import { customer } from "../customer/types";
import { instance, NewInstance, UpdateInstance, Product, NewProduct, CreatedProduct, DeletedProduct, UpdateProduct, UpdatedProduct, Transaction, NewTransaction, CreatedTransaction, UpdateTransaction, UpdatedTransaction, Invoice, Invoices, NewInvoice, CreatedInvoice, DeletedInvoice, UpdateInvoice, UpdatedInvoice, NewCustomer, CreatedCustomer, UpdateCustomer, UpdatedCustomer, sub_user, sub_users, NewUser, CreatedUser, DeletedUser, UpdateUser, addresses, NewAddress, DeletedAddress, UpdateAddress, SearchParams, RevenueParams, TotalParams, SeriesParams, InstancePageParams } from "./types";
export declare class Instance extends Base {
    getInstance(instance_id: number): Promise<import("axios").AxiosResponse<instance>>;
    createInstance(params: NewInstance): Promise<import("axios").AxiosResponse<instance>>;
    updateInstance(params: UpdateInstance): Promise<import("axios").AxiosResponse<instance>>;
    getInstancePage(page_number: number, params?: InstancePageParams): Promise<import("axios").AxiosResponse<instance[]>>;
    getInstanceProducts(instance_id: number, params?: SearchParams): Promise<import("axios").AxiosResponse<Product[]>>;
    createInstanceProduct(instance_id: number, params: NewProduct): Promise<import("axios").AxiosResponse<CreatedProduct>>;
    deleteInstanceProduct(instance_id: number, product_id: number): Promise<import("axios").AxiosResponse<DeletedProduct>>;
    updateInstanceProduct(instance_id: number, params: UpdateProduct): Promise<import("axios").AxiosResponse<UpdatedProduct>>;
    getInstanceTransactions(instance_id: number): Promise<import("axios").AxiosResponse<Transaction[]>>;
    findInstanceTransactions(instance_id: number, params?: SearchParams): Promise<import("axios").AxiosResponse<Transaction[]>>;
    getProductTransactions(instance_id: number, product_id: number): Promise<import("axios").AxiosResponse<Transaction[]>>;
    deleteInstanceTransaction(instance_id: number, transaction_id: number): Promise<import("axios").AxiosResponse<instance>>;
    createInstanceTransaction(instance_id: number, params: NewTransaction): Promise<import("axios").AxiosResponse<CreatedTransaction>>;
    updateInstanceTransaction(instance_id: number, params: UpdateTransaction): Promise<import("axios").AxiosResponse<UpdatedTransaction>>;
    getInstanceInvoices(instance_id: number, params?: SearchParams): Promise<import("axios").AxiosResponse<Invoices>>;
    getInstanceInvoice(instance_id: number, invoice_id: number): Promise<import("axios").AxiosResponse<Invoice>>;
    deleteInstanceInvoice(instance_id: number, invoice_id: number): Promise<import("axios").AxiosResponse<DeletedInvoice>>;
    createInstanceInvoice(instance_id: number, params: NewInvoice): Promise<import("axios").AxiosResponse<CreatedInvoice>>;
    updateInstanceInvoice(instance_id: number, params: UpdateInvoice): Promise<import("axios").AxiosResponse<UpdatedInvoice>>;
    getInstanceSeries(instance_id: number, params?: SeriesParams): Promise<import("axios").AxiosResponse<instance[]>>;
    getInstanceTotal(instance_id: number, params?: TotalParams): Promise<import("axios").AxiosResponse<instance[]>>;
    getInstanceRevenue(instance_id: number, params?: RevenueParams): Promise<import("axios").AxiosResponse<instance[]>>;
    getInstanceCustomers(instance_id: number, params?: SearchParams): Promise<import("axios").AxiosResponse<customer[]>>;
    getInstanceCustomer(instance_id: number, customer_id: number): Promise<import("axios").AxiosResponse<customer>>;
    deleteInstanceCustomer(instance_id: number, customer_id: number): Promise<import("axios").AxiosResponse<instance>>;
    createInstanceCustomer(instance_id: number, params: NewCustomer): Promise<import("axios").AxiosResponse<CreatedCustomer>>;
    updateInstanceCustomer(instance_id: number, params: UpdateCustomer): Promise<import("axios").AxiosResponse<UpdatedCustomer>>;
    getInstanceUsers(instance_id: number, params?: SearchParams): Promise<import("axios").AxiosResponse<sub_users>>;
    getInstanceUser(instance_id: number, user_id: number): Promise<import("axios").AxiosResponse<sub_user>>;
    deleteInstanceUser(instance_id: number, user_id: number): Promise<import("axios").AxiosResponse<DeletedUser>>;
    createInstanceUser(instance_id: number, params: NewUser): Promise<import("axios").AxiosResponse<CreatedUser>>;
    updateInstanceUser(instance_id: number, params: UpdateUser): Promise<import("axios").AxiosResponse<instance>>;
    getInstanceAddresses(instance_id: number, params?: SearchParams): Promise<import("axios").AxiosResponse<addresses>>;
    deleteInstanceAddress(instance_id: number, address_id: number): Promise<import("axios").AxiosResponse<DeletedAddress>>;
    createInstanceAddress(instance_id: number, params: NewAddress): Promise<import("axios").AxiosResponse<instance>>;
    updateInstanceAddress(instance_id: number, params: UpdateAddress): Promise<import("axios").AxiosResponse<instance>>;
    getInstanceCategories(instance_id: number, params?: SearchParams): Promise<import("axios").AxiosResponse<any[]>>;
    getInstanceBanners(instance_id: number, params?: SearchParams): Promise<import("axios").AxiosResponse<any[]>>;
    getProductComments(product_id: number, params?: SearchParams): Promise<import("axios").AxiosResponse<any[]>>;
    getProductRating(product_id: number, params?: SearchParams): Promise<import("axios").AxiosResponse<any[]>>;
    getSearchFilters(category_id?: number, params?: SearchParams): Promise<import("axios").AxiosResponse<any[]>>;
}
